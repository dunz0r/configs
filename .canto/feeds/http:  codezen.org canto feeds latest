ccopy_reg
_reconstructor
p1
(ccanto.feedparser_builtin
FeedParserDict
p2
c__builtin__
dict
p3
(dp4
S'feed'
p5
g1
(g2
g3
(dp6
S'title_detail'
p7
g1
(g2
g3
(dp8
S'base'
p9
S'http://codezen.org/canto/feeds/latest'
p10
sS'type'
p11
S'text/plain'
p12
sS'language'
p13
NsS'value'
p14
VCanto RSS
p15
stRp16
sS'subtitle'
p17
VCanto News
p18
sS'links'
p19
(lp20
g1
(g2
g3
(dp21
S'href'
p22
Vhttp://codezen.org/static/canto.xml
p23
sg11
S'text/html'
p24
sS'rel'
p25
S'alternate'
p26
stRp27
asS'title'
p28
g15
sS'link'
p29
g23
sS'subtitle_detail'
p30
g1
(g2
g3
(dp31
g9
S'http://codezen.org/canto/feeds/latest'
p32
sg11
S'text/html'
p33
sg13
Nsg14
g18
stRp34
stRp35
sS'status'
p36
I200
sS'updated'
p37
ctime
struct_time
p38
((I2011
I12
I20
I19
I33
I55
I1
I354
I0
t(dtRp39
sS'encoding'
p40
S'utf-8'
p41
sS'bozo'
p42
I0
sS'entries'
p43
(lp44
g1
(g2
g3
(dp45
S'summary_detail'
p46
g1
(g2
g3
(dp47
g9
S'http://codezen.org/canto/feeds/latest'
p48
sg11
S'text/html'
p49
sg13
Nsg14
V<p>    Hello again. It's been awhile, but this time hasn't been wasted. You can    see in the <a href="http://codezen.org/cgi-bin/gitweb.cgi?p=canto-curses.git;a=summary">Git log</a>    that progress is still being made. Of course, the age old    open source trouble of having real work get in the way has reared its    ugly head, but lately the changes have been mostly under the covers.    </p><p>    Among them are a massive drawing improvement that means that the most    complex format strings with thousands of stories will still be rendered    snappily, and as a few days ago the interface becomes informative and    usable much faster. The plugin infrastructure has grown to be more    robust, and I'm using it every day to include more interesting    information in my Reddit feeds. JSON is being used for the entirety of    the disk presence (config) and the protocol, so the daemon and client    should be more interoperable with programs written across the spectrum of    languages.    </p><p>    The visible improvements mostly include the ability to manipulate your    feeds from inside the interface. Things like changing tag order, adding    tags, using tags like folders. Also, adding, listing, and deleting feeds.    Keybinds are now handled (queried/set) easily through the interface.  The    ability to change themes and colors on the fly is there too, if a bit    rough at the moment. Theres also the ability to address ranges of items    abstractly to say, "set all items in this tag, above my cursor read".    OPML support and passworded feeds have been implemented for quite awhile.    </p><p>    I'm posting this because I'm currently slogging through the documentation    on a Wordpress installation elsewhere on codezen. I'm taking the approach    of adding polish as I document so it's less "document what I've done" and    more "document how I'd like it to work and then make it work that way."    This was the cause of the <code>bind</code> interface showing up, and now    it's the cause of the color code being simplified.    </p><p>    Having improved the codebase and ironed out many of the bugs, we're still    left with the following TODO:    <ul>        <li>Documentation</li>        <li>Polish</li>        <li>Reader content support</li>    </ul>    </p><p>    As you can see these were resident on the previous list as welll, but I    think that's understandable considering documentation and polish are    ongoing as the interface continues.    </p><p>    Reader content support (i.e. more intelligent downloading) should be    trivial, but I'm not sure whether it should be done as built in    functionality or with a plugin.    </p><p>    Anyway, that's what's up on the Canto front. I'm off at the end of the    week for the holidays, so I'd like to make better progress than I've been    able to in quite awhile.    </p><p>    -Jack    </p>
p50
stRp51
sg19
(lp52
g1
(g2
g3
(dp53
g22
Vhttp://codezen.org/canto/news/95
p54
sg11
g24
sg25
g26
stRp55
asg28
VUpdate 2
p56
sS'summary'
p57
g50
sS'guidislink'
p58
I00
sS'title_detail'
p59
g1
(g2
g3
(dp60
g9
S'http://codezen.org/canto/feeds/latest'
p61
sg11
S'text/plain'
p62
sg13
Nsg14
g56
stRp63
sg29
g54
sS'canto_state'
p64
(lp65
g15
aV*
asS'id'
p66
Vhttp://codezen.org/canto/news/95
p67
stRp68
ag1
(g2
g3
(dp69
S'summary_detail'
p70
g1
(g2
g3
(dp71
g9
S'http://codezen.org/canto/feeds/latest'
p72
sg11
S'text/html'
p73
sg13
Nsg14
V<p>Hello Canto-ers (Cantoites? Cantons?). Just a brief check-in about the status of\u000a0.8.0. Clearly the end of 2010 didn't see a release so I must be operating on\u000athe same sort of schedule that game studios run on =). Honestly though, the chip\u000aI'm working on at my day job is getting closer and closer to golden, and the my\u000aother projects are starting to heat up with real hardware so I've been slammed.</p>\u000a<p>Anyway things have come along nicely since the update last July (geez, it's\u000areally been that long). It's still not ready, but it's a lot closer to ready\u000athan ever. The server is maybe 90% done and the client maybe 75% done. Of course\u000athere are still a lot of things outside of code to be done. I'm personally\u000adreading the documentation, but hey what's the point of writing software if\u000anobody knows how to use it?</p>\u000a<p>Things that are done:</p>\u000a<ul>\u000a<li>\u000a<p>The whole system is configured with a <code>canto-remote</code> binary, no need to\u000a  hand-edit the config and restart <code>canto-daemon</code>.</p>\u000a</li>\u000a<li>\u000a<p>The client responds to config changes dynamically to changes made with the\u000a  remote. Includes things like interface tweaks, adding/removing feeds, themes\u000a  etc.</p>\u000a</li>\u000a<li>\u000a<p>The client and daemon can communicate over a real network socket. This\u000a  partially obviates the need to sync with a third party like Google Reader,\u000a  although I'd still like to see such functionality.</p>\u000a</li>\u000a<li>\u000a<p>Filters and sorts are implemented server-side. However, unlike the previous\u000a  post they are not done with persistent binaries. Even loading them into memory\u000a  just once and feeding info through pipes it was <em>dog slow</em> compared to native\u000a  Python objects. As a benefit though it allows for more expressive config\u000a  options using Python's <code>eval()</code> in a restricted environment.</p>\u000a</li>\u000a<li>\u000a<p>Python plugin system that already works for powerful keybinds and the\u000a  aforementioned filters and sorts.</p>\u000a</li>\u000a<li>\u000a<p>Practically everything else that's found in 0.7.x except the stuff in the next\u000a  list.</p>\u000a</li>\u000a</ul>\u000a<p>A brief TODO:</p>\u000a<ul>\u000a<li>\u000a<p>OPML support in <code>canto-remote</code></p>\u000a</li>\u000a<li>\u000a<p>Password protected feed support.</p>\u000a</li>\u000a<li>\u000a<p>Binary hooks. I believe these are okay to do in binaries still as the hook\u000a  events are much rarer and most of the canto internal state you'd want to mess\u000a  with could be done via <code>canto-remote</code> from wherever.</p>\u000a</li>\u000a<li>\u000a<p>Automatic / script based tagging of items.</p>\u000a</li>\u000a<li>\u000a<p>Some form of protection for network socket ability so it's suitable to run\u000a  over an open network (the internet) instead of just a LAN behind a firewall.</p>\u000a</li>\u000a<li>\u000a<p>Extend Python plugin system to include ability to fix/tweak important classes.</p>\u000a</li>\u000a<li>\u000a<p>Smarter reader download support.</p>\u000a</li>\u000a<li>\u000a<p>Polish, polish, polish, polish, polish.</p>\u000a</li>\u000a<li>\u000a<p>Documentation, man pages, etc.</p>\u000a</li>\u000a</ul>\u000a<p>I think that's a comprehensive list at this point. At least, fulfilling these\u000aitems would be enough for an 0.8.0 release.</p>\u000a<p>I want to refresh the site again with something that's a little more robust and\u000abetter integrated with git (and that I don't have to maintain myself). Like\u000aRedmine or just Github or something like that. Haven't thought about it too much\u000aat this stage.</p>\u000a<ul>\u000a<li>Jack</li>\u000a</ul>
p74
stRp75
sg19
(lp76
g1
(g2
g3
(dp77
g22
Vhttp://codezen.org/canto/news/94
p78
sg11
g24
sg25
g26
stRp79
asg28
VUpdate
p80
sg57
V<p>Hello Canto-ers (Cantoites? Cantons?). Just a brief check-in about the status of\u000a0.8.0. Clearly the end of 2010 didn't see a release so I must be operating on\u000athe same sort of schedule that game studios run on =). Honestly though, the chip\u000aI'm working on at my day job is getting closer and closer to golden, and the my\u000aother projects are starting to heat up with real hardware so I've been slammed.</p>\u000a<p>Anyway things have come along nicely since the update last July (geez, it's\u000areally been that long). It's still not ready, but it's a lot closer to ready\u000athan ever. The server is maybe 90\u005c% done and the client maybe 75\u005c% done. Of course\u000athere are still a lot of things outside of code to be done. I'm personally\u000adreading the documentation, but hey what's the point of writing software if\u000anobody knows how to use it?</p>\u000a<p>Things that are done:</p>\u000a<ul>\u000a<li>\u000a<p>The whole system is configured with a <code>canto-remote</code> binary, no need to\u000a  hand-edit the config and restart <code>canto-daemon</code>.</p>\u000a</li>\u000a<li>\u000a<p>The client responds to config changes dynamically to changes made with the\u000a  remote. Includes things like interface tweaks, adding/removing feeds, themes\u000a  etc.</p>\u000a</li>\u000a<li>\u000a<p>The client and daemon can communicate over a real network socket. This\u000a  partially obviates the need to sync with a third party like Google Reader,\u000a  although I'd still like to see such functionality.</p>\u000a</li>\u000a<li>\u000a<p>Filters and sorts are implemented server-side. However, unlike the previous\u000a  post they are not done with persistent binaries. Even loading them into memory\u000a  just once and feeding info through pipes it was <em>dog slow</em> compared to native\u000a  Python objects. As a benefit though it allows for more expressive config\u000a  options using Python's <code>eval()</code> in a restricted environment.</p>\u000a</li>\u000a<li>\u000a<p>Python plugin system that already works for powerful keybinds and the\u000a  aforementioned filters and sorts.</p>\u000a</li>\u000a<li>\u000a<p>Practically everything else that's found in 0.7.x except the stuff in the next\u000a  list.</p>\u000a</li>\u000a</ul>\u000a<p>A brief TODO:</p>\u000a<ul>\u000a<li>\u000a<p>OPML support in <code>canto-remote</code></p>\u000a</li>\u000a<li>\u000a<p>Password protected feed support.</p>\u000a</li>\u000a<li>\u000a<p>Binary hooks. I believe these are okay to do in binaries still as the hook\u000a  events are much rarer and most of the canto internal state you'd want to mess\u000a  with could be done via <code>canto-remote</code> from wherever.</p>\u000a</li>\u000a<li>\u000a<p>Automatic / script based tagging of items.</p>\u000a</li>\u000a<li>\u000a<p>Some form of protection for network socket ability so it's suitable to run\u000a  over an open network (the internet) instead of just a LAN behind a firewall.</p>\u000a</li>\u000a<li>\u000a<p>Extend Python plugin system to include ability to fix/tweak important classes.</p>\u000a</li>\u000a<li>\u000a<p>Smarter reader download support.</p>\u000a</li>\u000a<li>\u000a<p>Polish, polish, polish, polish, polish.</p>\u000a</li>\u000a<li>\u000a<p>Documentation, man pages, etc.</p>\u000a</li>\u000a</ul>\u000a<p>I think that's a comprehensive list at this point. At least, fulfilling these\u000aitems would be enough for an 0.8.0 release.</p>\u000a<p>I want to refresh the site again with something that's a little more robust and\u000abetter integrated with git (and that I don't have to maintain myself). Like\u000aRedmine or just Github or something like that. Haven't thought about it too much\u000aat this stage.</p>\u000a<ul>\u000a<li>Jack</li>\u000a</ul>
p81
sg58
I00
sS'title_detail'
p82
g1
(g2
g3
(dp83
g9
S'http://codezen.org/canto/feeds/latest'
p84
sg11
S'text/plain'
p85
sg13
Nsg14
g80
stRp86
sg29
g78
sg64
(lp87
g15
aV*
asg66
Vhttp://codezen.org/canto/news/94
p88
stRp89
ag1
(g2
g3
(dp90
S'summary_detail'
p91
g1
(g2
g3
(dp92
g9
S'http://codezen.org/canto/feeds/latest'
p93
sg11
S'text/html'
p94
sg13
Nsg14
V<p>You can grab the 0.7.10 release from the \u000a<a href="http://codezen.org/canto/download/">download</a> page.</p>\u000a<ul>\u000a<li>Add canto-inspect.1 manpage</li>\u000a<li>Fix other manpages</li>\u000a<li>Fix some 2.6 incompatible abuse</li>\u000a<li>Add workaround for bad feed data caused by switching between\u000a    the system feedparser and the builtin.</li>\u000a</ul>\u000a<p>This is basically a maintenance release, mostly thanks to Canto having a new\u000aDebian maintainer (thanks Vincent!). Essentially some immaterial cleanups that\u000awon't make a difference to most. Some better Python practices (particularly\u000astring exceptions that apparently have always been buggy and now are not\u000asupported int 2.6+).</p>\u000a<p>I would like this to be the last 0.7.x release, and thus consider it to be in\u000amaintenance mode. <code>xulos</code> and <code>jaacoppi</code> from IRC still have some nasty bugs,\u000abut try as I might I can't get them to reproduce. Resolving these bugs would be\u000athe only thing that would prompt an 0.7.11 release.</p>\u000a<h3 id="080-plans">0.8.0 Plans</h3>\u000a<p>So, as I've mentioned before, Canto was basically the first piece of Python that\u000aI wrote. I've learned everything I know about Python from building it and every\u000aversion from 0.4.1 to this latest 0.7.10 has been organically grown from the\u000asame codebase.</p>\u000a<p>As a result 0.7.10 is about 30% a product of the beginner Pythonista I <em>was</em>,\u000a50% the result of the intermediate Pythonista I came to be not recognizing the\u000apoor design, and 20% of the expert Pythonista I am now thrashing to salvage\u000aanything.</p>\u000a<p>Now I reached the point where I stopped thrashing, evaluated the codebase on its\u000amerits versus the amount of effort to start again and found that, easily, it\u000amade more sense to start from scratch.</p>\u000a<p>0.7.x evolved into a multi-process monster with <code>canto-fetch</code> flying around in a\u000acronjob. Its insides were twisted around to communicate with a gimpy form of\u000aPython only picklable socket protocol. The dividing line between work that\u000aneeded to be done in the interface and needed to be done in the backend was\u000ablurry and information that needed to cross the boundary ill-defined.</p>\u000a<p>In short, it became a huge mess, but that's what happens when you start with the\u000aidea of threading and (through necessity, thanks to the Python GIL) end-up with\u000aprocesses. Among other bad choices.</p>\u000a<p>0.8.0 rectifies the situation.</p>\u000a<p>Instead of a hideously twisted gimp protocol of 0.7.x, a real, genuine socket\u000aprotocol is being used to communicate with a (<em>gasp!</em>) daemon. Because the\u000adaemon exists, <code>canto-fetch</code> is history. As are slow exits, bouncing CPU usage,\u000aconfusing macro systems, eye glazing Python based configs, pointless lock\u000ahammering on the filesystem, delayed updates, and lost information.</p>\u000a<p>Most of the heavy lifting is done in the daemon, which is properly\u000amulti-threaded such that multiple clients could be running at once and\u000acooperate. Not only that, but because it uses a simple text based protocol\u000a(instead of Python-only pickles), it would be trivial to write a GTK or a Qt\u000abased frontend to canto and still take advantage of its filters, sorts and other\u000aconfiguration all in any language that's smart enough to talk to a socket (read:\u000aall of them).</p>\u000a<p>0.8.0 will be a great simplification.</p>\u000a<h3 id="current-status">Current Status</h3>\u000a<p>As of this writing, I have about half of the server functionality complete and\u000aabout a third (although it's the <em>hard</em> third) of the client done. Neither are\u000aup yet for public consumption, but as soon as I start giving IRC users alphas,\u000athere will be another post and the project will appear in the usual gitweb.</p>\u000a<p>I'm not sure how long it will take for that to happen, but I'm hoping to put out\u000athe initial 0.8.0 release before the end of the year (loose enough timeline for\u000ayou?).</p>\u000a<p>A short list of notable changes:</p>\u000a<ul>\u000a<li>\u000a<p>Server / client (as mentioned above).</p>\u000a</li>\u000a<li>\u000a<p>Blocking event-based architecture = 0% CPU usage when not in use.</p>\u000a</li>\u000a<li>\u000a<p>INI style config, that can be machine manipulated. (Although Python \u000a    extension will be worked in.)</p>\u000a</li>\u000a<li>\u000a<p>Built-in interface command line.</p>\u000a</li>\u000a<li>\u000a<p>Supports traditional text-cursor in addition to new commands making it trivial\u000a    to do massive batch operations and use the interface without the\u000a    text-cursor.</p>\u000a</li>\u000a<li>\u000a<p>Filters / sorts in arbitrary, persistently loaded binaries.</p>\u000a</li>\u000a<li>\u000a<p>All around more efficient methods for practically everything.</p>\u000a</li>\u000a</ul>\u000a<p>The basic gist you should take away from this post is that it's time for Canto\u000ato level up.</p>\u000a<ul>\u000a<li>Jack</li>\u000a</ul>
p95
stRp96
sg19
(lp97
g1
(g2
g3
(dp98
g22
Vhttp://codezen.org/canto/news/93
p99
sg11
g24
sg25
g26
stRp100
asg28
V0.7.10 and plans
p101
sg57
V<p>You can grab the 0.7.10 release from the \u000a<a href="http://codezen.org/canto/download/">download</a> page.</p>\u000a<ul>\u000a<li>Add canto-inspect.1 manpage</li>\u000a<li>Fix other manpages</li>\u000a<li>Fix some 2.6 incompatible abuse</li>\u000a<li>Add workaround for bad feed data caused by switching between\u000a    the system feedparser and the builtin.</li>\u000a</ul>\u000a<p>This is basically a maintenance release, mostly thanks to Canto having a new\u000aDebian maintainer (thanks Vincent!). Essentially some immaterial cleanups that\u000awon't make a difference to most. Some better Python practices (particularly\u000astring exceptions that apparently have always been buggy and now are not\u000asupported int 2.6+).</p>\u000a<p>I would like this to be the last 0.7.x release, and thus consider it to be in\u000amaintenance mode. <code>xulos</code> and <code>jaacoppi</code> from IRC still have some nasty bugs,\u000abut try as I might I can't get them to reproduce. Resolving these bugs would be\u000athe only thing that would prompt an 0.7.11 release.</p>\u000a<h3 id="080-plans">0.8.0 Plans</h3>\u000a<p>So, as I've mentioned before, Canto was basically the first piece of Python that\u000aI wrote. I've learned everything I know about Python from building it and every\u000aversion from 0.4.1 to this latest 0.7.10 has been organically grown from the\u000asame codebase.</p>\u000a<p>As a result 0.7.10 is about 30\u005c% a product of the beginner Pythonista I <em>was</em>,\u000a50\u005c% the result of the intermediate Pythonista I came to be not recognizing the\u000apoor design, and 20\u005c% of the expert Pythonista I am now thrashing to salvage\u000aanything.</p>\u000a<p>Now I reached the point where I stopped thrashing, evaluated the codebase on its\u000amerits versus the amount of effort to start again and found that, easily, it\u000amade more sense to start from scratch.</p>\u000a<p>0.7.x evolved into a multi-process monster with <code>canto-fetch</code> flying around in a\u000acronjob. Its insides were twisted around to communicate with a gimpy form of\u000aPython only picklable socket protocol. The dividing line between work that\u000aneeded to be done in the interface and needed to be done in the backend was\u000ablurry and information that needed to cross the boundary ill-defined.</p>\u000a<p>In short, it became a huge mess, but that's what happens when you start with the\u000aidea of threading and (through necessity, thanks to the Python GIL) end-up with\u000aprocesses. Among other bad choices.</p>\u000a<p>0.8.0 rectifies the situation.</p>\u000a<p>Instead of a hideously twisted gimp protocol of 0.7.x, a real, genuine socket\u000aprotocol is being used to communicate with a (<em>gasp!</em>) daemon. Because the\u000adaemon exists, <code>canto-fetch</code> is history. As are slow exits, bouncing CPU usage,\u000aconfusing macro systems, eye glazing Python based configs, pointless lock\u000ahammering on the filesystem, delayed updates, and lost information.</p>\u000a<p>Most of the heavy lifting is done in the daemon, which is properly\u000amulti-threaded such that multiple clients could be running at once and\u000acooperate. Not only that, but because it uses a simple text based protocol\u000a(instead of Python-only pickles), it would be trivial to write a GTK or a Qt\u000abased frontend to canto and still take advantage of its filters, sorts and other\u000aconfiguration all in any language that's smart enough to talk to a socket (read:\u000aall of them).</p>\u000a<p>0.8.0 will be a great simplification.</p>\u000a<h3 id="current-status">Current Status</h3>\u000a<p>As of this writing, I have about half of the server functionality complete and\u000aabout a third (although it's the <em>hard</em> third) of the client done. Neither are\u000aup yet for public consumption, but as soon as I start giving IRC users alphas,\u000athere will be another post and the project will appear in the usual gitweb.</p>\u000a<p>I'm not sure how long it will take for that to happen, but I'm hoping to put out\u000athe initial 0.8.0 release before the end of the year (loose enough timeline for\u000ayou?).</p>\u000a<p>A short list of notable changes:</p>\u000a<ul>\u000a<li>\u000a<p>Server / client (as mentioned above).</p>\u000a</li>\u000a<li>\u000a<p>Blocking event-based architecture = 0\u005c% CPU usage when not in use.</p>\u000a</li>\u000a<li>\u000a<p>INI style config, that can be machine manipulated. (Although Python \u000a    extension will be worked in.)</p>\u000a</li>\u000a<li>\u000a<p>Built-in interface command line.</p>\u000a</li>\u000a<li>\u000a<p>Supports traditional text-cursor in addition to new commands making it trivial\u000a    to do massive batch operations and use the interface without the\u000a    text-cursor.</p>\u000a</li>\u000a<li>\u000a<p>Filters / sorts in arbitrary, persistently loaded binaries.</p>\u000a</li>\u000a<li>\u000a<p>All around more efficient methods for practically everything.</p>\u000a</li>\u000a</ul>\u000a<p>The basic gist you should take away from this post is that it's time for Canto\u000ato level up.</p>\u000a<ul>\u000a<li>Jack</li>\u000a</ul>
p102
sg58
I00
sS'title_detail'
p103
g1
(g2
g3
(dp104
g9
S'http://codezen.org/canto/feeds/latest'
p105
sg11
S'text/plain'
p106
sg13
Nsg14
g101
stRp107
sg29
g99
sg64
(lp108
g15
aV*
asg66
Vhttp://codezen.org/canto/news/93
p109
stRp110
ag1
(g2
g3
(dp111
S'summary_detail'
p112
g1
(g2
g3
(dp113
g9
S'http://codezen.org/canto/feeds/latest'
p114
sg11
S'text/html'
p115
sg13
Nsg14
V<p>You can grab the 0.7.9 release from the \u000a<a href="http://codezen.org/canto/download/">download</a> page.</p>\u000a<ul>\u000a<li>Fix fresh install sans system feedparser</li>\u000a<li>Make canto-inspect use builtin feedparser</li>\u000a</ul>\u000a<p>Some kinks had to be worked out with the import of feedparser and parts of the\u000acode were still falling back on the system. I am disappointed I haven't heard\u000aback from one of the original reporters so 0.7.10 might be coming sooner rather\u000athan later, but the part of the problem I was able to reproduce locally (and\u000acropped up others' machines) was fixed in this commit.</p>\u000a<p>Have fun! Submit bugs!</p>
p116
stRp117
sg19
(lp118
g1
(g2
g3
(dp119
g22
Vhttp://codezen.org/canto/news/92
p120
sg11
g24
sg25
g26
stRp121
asg28
V0.7.9
p122
sg57
g116
sg58
I00
sS'title_detail'
p123
g1
(g2
g3
(dp124
g9
S'http://codezen.org/canto/feeds/latest'
p125
sg11
S'text/plain'
p126
sg13
Nsg14
g122
stRp127
sg29
g120
sg64
(lp128
g15
aV*
asg66
Vhttp://codezen.org/canto/news/92
p129
stRp130
ag1
(g2
g3
(dp131
S'summary_detail'
p132
g1
(g2
g3
(dp133
g9
S'http://codezen.org/canto/feeds/latest'
p134
sg11
S'text/html'
p135
sg13
Nsg14
V<p>You can grab the 0.7.8 release from the \u000a<a href="http://codezen.org/canto/download/">download</a> page.</p>\u000a<ul>\u000a<li>Fix feed exception encoding problem.</li>\u000a<li>Fix occasional zombies / extra pids floating around.</li>\u000a<li>Import feedparser into source tree.</li>\u000a<li>Add -s/--sysfp flag to canto-fetch to fall back on system feedparser</li>\u000a<li>Render improvements by honoring declared content types</li>\u000a</ul>\u000a<h3 id="feedparser">Feedparser</h3>\u000a<p>Hot on the heels of the 0.7.7 release comes 0.7.8. It's been awhile since\u000athere's been a release that's only lasted a week, but in this case it had to\u000ahappen. Why? Feedparser.</p>\u000a<p>I love feedparser. It really makes my life much easier when it comes to getting\u000afeeds. I haven't touched XML with code since I started using it and it's been\u000agreat. What I <em>don't</em> like about feedparser however is that the venerable <a href="http://diveintomark.org">Mark\u000aPilgrim</a> that authored it and maintains it has no time\u000ato fix or integrate fixes for about a million little bugs.</p>\u000a<p>Right now, the Debian version of feedparser (the one I use everyday) has 14\u000apatches against it. Understandable since the last release of feedparser was in\u000aApril 2007. Things are bound to break. Arch has got 5. Gentoo, and I'm sure a\u000alot of other distros have 0. So there are a number of versions floating around\u000aeach with different behavior. I've known about this since Canto started using\u000afeedparser.</p>\u000a<p>Over the last year or so a number of people have submitted bugs about this and\u000athat, and some of them were serious in that they rendered a feed entirely\u000auseless. Like misreporting titles. Or even worse, causing exceptions. Each time\u000aI just told them, "I'm sorry, it's feedparser, talk to your distro's maintainer\u000aabout picking up this patch."</p>\u000a<p>For the most part things were okay like this only because (at least, initially)\u000aI thought mpilgrim was going to step up and feedparser 4.2 would be coming out\u000aand maybe I wouldn't <em>have</em> to resort to importing the source. Then, in the last\u000a<strong>week</strong>, I got two bug reports from two separate people on two different\u000adistros that both came down to feedparser. The clock on 4.1 just passed three\u000ayears and I've had enough. So I grabbed Debian's feedparser and tossed it into\u000athe source.</p>\u000a<p>Now everyone will be on a level playing field and if (or <em>when</em>) someone else\u000areports a bug that traces into feedparser. I can get in there and fix it myself,\u000awithout having to wait on mpilgrim or the distros. Mission accomplished.</p>\u000a<p>I don't foresee problems migrating beyond, perhaps, some items being marked as\u000aunread again because their IDs have changed.</p>\u000a<h3 id="rendering">Rendering</h3>\u000a<p>The other noticeable improvement on this release is the rendering of content\u000athat is explicitly reported as <code>text/plain</code>. Previous to this release, Canto\u000aignored such things and attempted to render basically everything as HTML. It's a\u000astrategy that had served Canto well trying to cope with feeds published by\u000amoronic broken publishers and most of the time <code>text/plain</code> content wasn't\u000achanged in the process. However, this is sort of punishing good feed publishers\u000afor the others' stupidity by messing with the spacing of their content.</p>\u000a<p>In particular, things like plaintext logs and the like would show up as a\u000ajumbled mess even though the feed declared "hey, don't format this."</p>\u000a<p>So, to stop punishing the good guys, Canto honors the type. This <em>may</em> make bad\u000afeeds look like crap, but in that case the user can contact the publisher to\u000acomplain.</p>\u000a<h3 id="077-exception">0.7.7 Exception</h3>\u000a<p>Twice in the short lifespan of 0.7.7 it was reported that Canto excepted on line\u000a289 of <code>process.py</code>. I didn't fix it directly, but I believe that it was fixed\u000aby restoring an accidentally dropped line from 0.7.6. If this isn't the case and\u000ayou see such an exception, please report it.</p>\u000a<h3 id="thanks">Thanks</h3>\u000a<p>Lastly, thanks to <code>jaacoppi</code> (the pidwatcher), <code>evg_krsk</code>, and Caleb for\u000areporting bugs for this release.</p>\u000a<p>Have fun! Submit bugs!</p>
p136
stRp137
sg19
(lp138
g1
(g2
g3
(dp139
g22
Vhttp://codezen.org/canto/news/91
p140
sg11
g24
sg25
g26
stRp141
asg28
V0.7.8
p142
sg57
g136
sg58
I00
sS'title_detail'
p143
g1
(g2
g3
(dp144
g9
S'http://codezen.org/canto/feeds/latest'
p145
sg11
S'text/plain'
p146
sg13
Nsg14
g142
stRp147
sg29
g140
sg64
(lp148
g15
aV*
asg66
Vhttp://codezen.org/canto/news/91
p149
stRp150
asS'canto_update'
p151
F1341363348.3615601
sS'headers'
p152
(dp153
S'content-length'
p154
S'19250'
p155
sS'accept-ranges'
p156
S'bytes'
p157
sS'server'
p158
S'Apache/2.2.16 (Debian)'
p159
sS'last-modified'
p160
S'Tue, 20 Dec 2011 19:33:55 GMT'
p161
sS'connection'
p162
S'close'
p163
sS'etag'
p164
S'"4ac657-4b32-4b48b25d4cec0"'
p165
sS'date'
p166
S'Wed, 04 Jul 2012 00:54:53 GMT'
p167
sS'content-type'
p168
S'application/xml'
p169
ssg22
S'http://codezen.org/canto/feeds/latest'
p170
sS'version'
p171
S'rss20'
p172
sg64
(lp173
sS'etag'
p174
g165
sS'namespaces'
p175
(dp176
sS'canto_version'
p177
(I0
I7
I10
tp178
stRp179
.